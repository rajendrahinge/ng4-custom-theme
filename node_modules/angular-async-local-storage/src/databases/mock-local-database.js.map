{"version":3,"sources":["../../../src/databases/mock-local-database.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAE3C,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,wBAAA,CAAyB;AAEhC,OAAO,EAAE,kBAAA,EAAmB,MAAO,wBAAA,CAAyB;AAG5D;IAAuC,qCAAkB;IAAzD;QAAA,qEA8DC;QA5Da,kBAAY,GAAG,IAAI,GAAG,EAAe,CAAC;;IA4DpD,CAAC;IA1DG;;;;OAIG;IACI,mCAAO,GAAd,UAAe,GAAW;QAEtB,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEtC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,SAAS,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;IAE5D,CAAC;IAED;;;;;OAKG;IACI,mCAAO,GAAd,UAAe,GAAW,EAAE,IAAS;QAEjC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAEjC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAE/B,CAAC;IAED;;;;OAIG;IACI,sCAAU,GAAjB,UAAkB,GAAW;QAEzB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAE9B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAE/B,CAAC;IAED;;;OAGG;IACI,iCAAK,GAAZ;QAEI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAE1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAE/B,CAAC;IAQL,wBAAC;AAAD,CA9DA,AA8DC,CA9DsC,kBAAkB;;AAwDlD,4BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"mock-local-database.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\n\nimport { AsyncLocalDatabase } from './async-local-database';\n\n\nexport class MockLocalDatabase extends AsyncLocalDatabase {\n\n    protected localStorage = new Map<string, any>();\n\n    /**\n     * Gets an item value in local storage\n     * @param key The item's key\n     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n    public getItem(key: string): Observable<any> {\n\n        let data = this.localStorage.get(key);\n\n        return Observable.of((data != undefined) ? data : null);\n\n    }\n\n    /**\n     * Sets an item in local storage\n     * @param key The item's key\n     * @param data The item's value, must NOT be null or undefined\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    public setItem(key: string, data: any): Observable<boolean> {\n\n        this.localStorage.set(key, data);\n\n        return Observable.of(true);\n\n    }\n\n    /**\n     * Deletes an item in local storage\n     * @param key The item's key\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    public removeItem(key: string): Observable<boolean> {\n\n        this.localStorage.delete(key);\n\n        return Observable.of(true);\n\n    }\n\n    /**\n     * Deletes all items from local storage\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    public clear(): Observable<boolean> {\n\n        this.localStorage.clear();\n\n        return Observable.of(true);\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}