{"version":3,"sources":["../../../src/databases/localstorage-database.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAE3C,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,wBAAA,CAAyB;AAChC,OAAO,2BAAA,CAA4B;AAEnC,OAAO,EAAE,kBAAA,EAAmB,MAAO,wBAAA,CAAyB;AAG5D;IAA0C,wCAAkB;IAA5D;QAAA,qEAyEC;QAvEG,uGAAuG;QAC7F,kBAAY,GAAG,YAAY,CAAC;;IAsE1C,CAAC;IApEG;;;;OAIG;IACI,sCAAO,GAAd,UAAe,GAAW;QAEtB,IAAI,IAAI,GAAQ,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAE/C,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YAEf,IAAI,CAAC;gBACD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC5B,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;YACxE,CAAC;QAEL,CAAC;QAED,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAE/B,CAAC;IAED;;;;;OAKG;IACI,sCAAO,GAAd,UAAe,GAAW,EAAE,IAAS;QAEjC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAErD,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAE/B,CAAC;IAED;;;;OAIG;IACI,yCAAU,GAAjB,UAAkB,GAAW;QAEzB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAElC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAE/B,CAAC;IAED;;;OAGG;IACI,oCAAK,GAAZ;QAEI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAE1B,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAE/B,CAAC;IAQL,2BAAC;AAAD,CAzEA,AAyEC,CAzEyC,kBAAkB;;AAmErD,+BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,mCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"localstorage-database.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/throw';\n\nimport { AsyncLocalDatabase } from './async-local-database';\n\n\nexport class LocalStorageDatabase extends AsyncLocalDatabase {\n\n    /* Initializing native localStorage right now to be able to check its support on class instanciation */\n    protected localStorage = localStorage;\n\n    /**\n     * Gets an item value in local storage\n     * @param key The item's key\n     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n    public getItem(key: string): Observable<any> {\n\n        let data: any = this.localStorage.getItem(key);\n\n        if (data != null) {\n\n            try {\n                data = JSON.parse(data);\n            } catch (error) {\n                return Observable.throw(new Error(`Invalid data in localStorage.`));\n            }\n\n        }\n\n        return Observable.of(data);\n\n    }\n\n    /**\n     * Sets an item in local storage\n     * @param key The item's key\n     * @param data The item's value, must NOT be null or undefined\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    public setItem(key: string, data: any): Observable<boolean> {\n\n        this.localStorage.setItem(key, JSON.stringify(data));\n\n        return Observable.of(true);\n\n    }\n\n    /**\n     * Deletes an item in local storage\n     * @param key The item's key\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    public removeItem(key: string): Observable<boolean> {\n\n        this.localStorage.removeItem(key);\n\n        return Observable.of(true);\n\n    }\n\n    /**\n     * Deletes all items from local storage\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    public clear(): Observable<boolean> {\n\n        this.localStorage.clear();\n\n        return Observable.of(true);\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}