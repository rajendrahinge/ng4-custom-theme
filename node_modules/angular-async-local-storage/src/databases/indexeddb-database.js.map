{"version":3,"sources":["../../../src/databases/indexeddb-database.ts"],"names":[],"mappings":"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","file":"indexeddb-database.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/pluck';\nimport 'rxjs/add/operator/first';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/merge';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/observable/of';\n\nimport { AsyncLocalDatabase } from './async-local-database';\n\n\nexport class IndexedDBDatabase extends AsyncLocalDatabase {\n\n    /** \n     * IndexedDB database name for local storage \n     */\n    protected readonly dbName: string = 'ngStorage';\n    /** \n     * IndexedDB object store name for local storage\n     */\n    protected readonly objectStoreName: string = 'localStorage';\n    /** \n     * IndexedDB key path name for local storage (where an item's key will be stored) \n     */\n    protected readonly keyPath: string = 'key';\n    /** \n     * IndexedDB data path name for local storage (where items' value will be stored)\n     */\n    protected readonly dataPath: string = 'value';\n    /** \n     * IndexedDB database connection, wrapped in a RxJS ReplaySubject to be able to access the connection\n     * even after the connection success event happened \n     */\n    protected database: ReplaySubject<IDBDatabase>;\n\n    /** \n     * Connects to IndexedDB\n     */\n    public constructor() {\n\n        super();\n\n        /* Creating the RxJS ReplaySubject */\n        this.database = new ReplaySubject<IDBDatabase>();\n\n        /* Connecting to IndexedDB */\n        this.connect();\n\n    }\n\n    /**\n     * Gets an item value in local storage\n     * @param key The item's key\n     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n    public getItem(key: string): Observable<any> {\n\n        /* Opening a trasaction and requesting the item in local storage */\n        return this.transaction().map((transaction) => transaction.get(key)).mergeMap((request) => {\n\n            /* Listening to the success event, and passing the item value if found, null otherwise */\n            let success = Observable.fromEvent(request, 'success')\n                .pluck('target', 'result')\n                .map((result: any) => result ? result[this.dataPath] : null);\n\n            /* Merging success and errors events and autoclosing the observable */\n            return Observable.merge(success, this.toErrorObservable(request, `getter`)).first();\n\n        });\n\n    }\n\n    /**\n     * Sets an item in local storage\n     * @param key The item's key\n     * @param data The item's value, must NOT be null or undefined\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    public setItem(key: string, data: any): Observable<boolean> {\n\n        /* Storing null is not correctly supported by IndexedDB and unnecessary here */\n        if (data == null) {\n\n            return Observable.of(true);\n\n        }\n\n        /* Opening a transaction and checking if the item already exists in local storage */\n        return this.getItem(key).map((data) => (data == null) ? 'add' : 'put').mergeMap((method) => {\n\n            /* Opening a transaction */\n            return this.transaction('readwrite').mergeMap((transaction) => {\n\n                let request: IDBRequest;\n\n                /* Adding or updating local storage, based on previous checking */\n                switch (method) {\n                    case 'add':\n                        request = transaction.add({ [this.dataPath]: data }, key);\n                        break;\n                    case 'put':\n                    default:\n                        request = transaction.put({ [this.dataPath]: data }, key);\n                        break;\n                }\n\n                /* Merging success (passing true) and error events and autoclosing the observable */\n                return Observable.merge(this.toSuccessObservable(request), this.toErrorObservable(request, `setter`)).first();\n\n            });\n\n        });\n\n    }\n\n    /**\n     * Deletes an item in local storage\n     * @param key The item's key\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    public removeItem(key: string): Observable<boolean> {\n\n        /* Opening a transaction and checking if the item exists in local storage */\n        return this.getItem(key).mergeMap((data) => {\n\n            /* If the item exists in local storage */\n            if (data != null) {\n\n                /* Opening a transaction */\n                return this.transaction('readwrite').mergeMap((transaction) => {\n\n                    /* Deleting the item in local storage */\n                    let request = transaction.delete(key);\n\n                    /* Merging success (passing true) and error events and autoclosing the observable */\n                    return Observable.merge(this.toSuccessObservable(request), this.toErrorObservable(request, `remover`)).first();\n\n                });\n\n            }\n\n            /* Passing true if the item does not exist in local storage */\n            return Observable.of(true).first();\n\n        });\n\n    }\n\n    /**\n     * Deletes all items from local storage\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    public clear(): Observable<boolean> {\n\n        /* Opening a transaction */\n        return this.transaction('readwrite').mergeMap((transaction) => {\n\n            /* Deleting all items from local storage */\n            let request = transaction.clear();\n\n            /* Merging success (passing true) and error events and autoclosing the observable */\n            return Observable.merge(this.toSuccessObservable(request), this.toErrorObservable(request, `clearer`)).first();\n\n        });\n\n    }\n\n    /**\n     * Connects to IndexedDB and creates the object store on first time\n     */\n    protected connect(): void {\n        \n        /* Connecting to IndexedDB */\n        let request = indexedDB.open(this.dbName);\n\n        /* Listening the event fired on first connection, creating the object store for local storage */\n        Observable.fromEvent(request, 'upgradeneeded').first().subscribe((event: Event) => {\n\n            /* Getting the database connection */\n            let database = (event.target as IDBRequest).result as IDBDatabase;\n\n            /* Checking if the object store already exists, to avoid error */\n            if (!database.objectStoreNames.contains(this.objectStoreName)) {\n\n                /* Creating the object store for local storage */\n                database.createObjectStore(this.objectStoreName);\n\n            }\n\n        });\n\n        /* Listening the success event and converting to an RxJS Observable */\n        let success = Observable.fromEvent(request, 'success');\n\n        /* Merging success and errors events */\n        Observable.merge(success, this.toErrorObservable(request, `connection`)).first().subscribe((event: Event) => {\n\n                /* Storing the database connection for further access */\n                this.database.next((event.target as IDBRequest).result as IDBDatabase);\n\n        });\n\n    }\n\n    /**\n     * Opens an IndexedDB transaction and gets the local storage object store\n     * @param mode Default to 'readonly' for read operations, or 'readwrite' for write operations\n     * @returns An IndexedDB transaction object store, wrapped in an RxJS Observable\n     */\n    protected transaction(mode: 'readonly' | 'readwrite' = 'readonly'): Observable<IDBObjectStore> {\n\n        /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */\n        return this.database.map((database) => database.transaction([this.objectStoreName], mode).objectStore(this.objectStoreName));\n\n    }\n\n    /**\n     * Transforms a IndexedDB success event in an RxJS Observable\n     * @param request The request to listen\n     * @returns A RxJS Observable with true value\n     */\n    protected toSuccessObservable(request: IDBRequest) {\n\n        /* Transforming a IndexedDB success event in an RxJS Observable with true value */\n        return Observable.fromEvent(request, 'success').map(() => true);\n\n    }\n\n    /**\n     * Transforms a IndexedDB error event in an RxJS ErrorObservable\n     * @param request The request to listen\n     * @param error Optionnal details about the error's origin\n     * @returns A RxJS ErrorObservable\n     */\n    protected toErrorObservable(request: IDBRequest, error: string = ``) {\n\n        /* Transforming a IndexedDB error event in an RxJS ErrorObservable */\n        return Observable.fromEvent(request, 'error').mergeMap(() => Observable.throw(new Error(`IndexedDB ${error} issue.`)));\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}