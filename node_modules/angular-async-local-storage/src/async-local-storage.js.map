{"version":3,"sources":["../../src/async-local-storage.ts"],"names":[],"mappings":"AAAA,OAAO,EAAU,UAAA,EAAW,MAAO,eAAA,CAAgB;AAInD,OAAO,EAAE,kBAAA,EAAmB,MAAO,kCAAA,CAAmC;AAGtE;IAII;;OAEG;IACH,2BAAmB,QAA4B;QAE3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAE7B,CAAC;IAED;;;;OAIG;IACI,mCAAO,GAAd,UAAe,GAAW;QAEtB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAEtC,CAAC;IAED;;;;;OAKG;IACI,mCAAO,GAAd,UAAe,GAAW,EAAE,IAAS;QAEjC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAE5C,CAAC;IAED;;;;OAIG;IACI,sCAAU,GAAjB,UAAkB,GAAW;QAEzB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAEzC,CAAC;IAED;;;OAGG;IACI,iCAAK,GAAZ;QAEI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IAEjC,CAAC;IASL,wBAAC;AAAD,CAhEA,AAgEC;;AAPM,4BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,gCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,kBAAkB,GAAG;CAC3B,EAF6F,CAE7F,CAAC","file":"async-local-storage.js","sourceRoot":"","sourcesContent":["import { Inject, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { AsyncLocalDatabase } from './databases/async-local-database';\n\n\nexport class AsyncLocalStorage {\n\n    protected database: AsyncLocalDatabase;\n\n    /** \n     * Injects a local database\n     */\n    public constructor(database: AsyncLocalDatabase) {\n\n        this.database = database;\n\n    }\n\n    /**\n     * Gets an item value in local storage\n     * @param key The item's key\n     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n    public getItem(key: string): Observable<any> {\n\n        return this.database.getItem(key);\n\n    }\n\n    /**\n     * Sets an item in local storage\n     * @param key The item's key\n     * @param data The item's value, must NOT be null or undefined\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    public setItem(key: string, data: any): Observable<boolean> {\n\n        return this.database.setItem(key, data);\n\n    }\n\n    /**\n     * Deletes an item in local storage\n     * @param key The item's key\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    public removeItem(key: string): Observable<boolean> {\n\n        return this.database.removeItem(key);\n\n    }\n\n    /**\n     * Deletes all items from local storage\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    public clear(): Observable<boolean> {\n\n        return this.database.clear();\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AsyncLocalDatabase, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}